// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model User {
  id           String   @id @default(cuid())
  email        String   @unique
  passwordHash String
  name         String?
  role         String   @default("USER") // "USER", "ADMIN"
  riskProfile  String?  // "KONSERVATIF", "MODERAT", "AGRESIF"
  isActive     Boolean  @default(true)
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  
  // Relations
  progress     UserProgress[]
  transactions InvestmentTransaction[]
  portfolio    Portfolio?
  watchlists   Watchlist[]
  
  @@map("users")
}

model Lesson {
  id          String   @id @default(cuid())
  title       String
  content     String   @db.Text
  day         Int      @unique // Day number (1, 2, 3, etc.)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  
  // Relations
  quiz        Quiz?
  progress    UserProgress[]
  
  @@map("lessons")
}

model Quiz {
  id        String   @id @default(cuid())
  lessonId  String   @unique
  question  String
  options   Json     // Array of options
  answer    Int      // Index of correct answer (0, 1, 2, 3)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
  // Relations
  lesson    Lesson   @relation(fields: [lessonId], references: [id], onDelete: Cascade)
  
  @@map("quizzes")
}

model UserProgress {
  id          String   @id @default(cuid())
  userId      String
  lessonId    String
  quizScore   Int?     // Score from 0-100
  streak      Int      @default(0) // Current streak
  completedAt DateTime @default(now())
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  
  // Relations
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  lesson      Lesson   @relation(fields: [lessonId], references: [id], onDelete: Cascade)
  
  @@unique([userId, lessonId])
  @@map("user_progress")
}

// Investment models
model InvestmentProduct {
  id            String   @id @default(cuid())
  name          String   @unique
  type          String   // "REKSADANA", "OBLIGASI", "SBN"
  category      String   // "PASAR_UANG", "OBLIGASI", "CAMPURAN", "SAHAM"
  riskLevel     String   // "KONSERVATIF", "MODERAT", "AGRESIF"
  expectedReturn Float
  minInvestment Float
  currentPrice  Float
  description   String   @db.Text
  isActive      Boolean  @default(true)
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  
  // Relations
  transactions InvestmentTransaction[]
  watchlists   Watchlist[]
  holdings     PortfolioHolding[]
  priceHistory PriceHistory[]
  
  @@map("investment_products")
}

model InvestmentTransaction {
  id          String   @id @default(cuid())
  userId      String
  productId   String
  type        String   // "BUY", "SELL"
  amount      Float
  units       Float
  price       Float
  totalValue  Float
  status      String   // "PENDING", "COMPLETED", "CANCELLED"
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  
  // Relations
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  product     InvestmentProduct @relation(fields: [productId], references: [id], onDelete: Cascade)
  
  @@map("investment_transactions")
}

model Portfolio {
  id              String   @id @default(cuid())
  userId          String   @unique
  totalValue      Float    @default(0)
  totalGain       Float    @default(0)
  totalGainPercent Float   @default(0)
  riskProfile     String   // "KONSERVATIF", "MODERAT", "AGRESIF"
  rdnBalance      Float    @default(0)
  tradingBalance  Float    @default(0)
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
  
  // Relations
  user            User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  holdings        PortfolioHolding[]
  
  @@map("portfolios")
}

model PortfolioHolding {
  id            String   @id @default(cuid())
  portfolioId   String
  productId     String
  units         Float
  averagePrice  Float
  currentValue  Float
  gain          Float
  gainPercent   Float
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  
  // Relations
  portfolio     Portfolio @relation(fields: [portfolioId], references: [id], onDelete: Cascade)
  product       InvestmentProduct @relation(fields: [productId], references: [id], onDelete: Cascade)
  
  @@unique([portfolioId, productId])
  @@map("portfolio_holdings")
}

model Watchlist {
  id        String   @id @default(cuid())
  userId    String
  productId String
  createdAt DateTime @default(now())
  
  // Relations
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  product   InvestmentProduct @relation(fields: [productId], references: [id], onDelete: Cascade)
  
  @@unique([userId, productId])
  @@map("watchlists")
}

model PriceHistory {
  id          String   @id @default(cuid())
  productId   String
  price       Float
  change      Float
  changePercent Float
  timestamp   DateTime @default(now())
  
  // Relations
  product     InvestmentProduct @relation(fields: [productId], references: [id], onDelete: Cascade)
  
  @@map("price_history")
}

model SystemSetting {
  id    String @id @default(cuid())
  key   String @unique
  value String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
  @@map("system_settings")
}
